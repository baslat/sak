% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mutate_pmap.r
\name{mutate_pmap}
\alias{mutate_pmap}
\title{Use \code{pmap} to create a new column in a data.frame}
\usage{
mutate_pmap(.data, col_name, .f, ...)
}
\arguments{
\item{.data}{A data frame, data frame extension (e.g. a tibble), or a
lazy data frame (e.g. from dbplyr or dtplyr). See \emph{Methods}, below, for
more details.}

\item{col_name}{(unquoted character) the name of the new column you want to
add}

\item{.f}{A function, specified in one of the following ways:
\itemize{
\item A named function.
\item An anonymous function, e.g. \verb{\\(x, y, z) x + y / z} or
\code{function(x, y, z) x + y / z}
\item A formula, e.g. \code{~ ..1 + ..2 / ..3}. This syntax is not recommended as
you can only refer to arguments by position.
}}

\item{...}{Additional arguments passed on to the mapped function.

We now generally recommend against using \code{...} to pass additional
(constant) arguments to \code{.f}. Instead use a shorthand anonymous function:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{# Instead of
x |> map(f, 1, 2, collapse = ",")
# do:
x |> map(\\(x) f(x, 1, 2, collapse = ","))
}\if{html}{\out{</div>}}

This makes it easier to understand which arguments belong to which
function and will tend to yield better error messages.}
}
\value{
\code{.data} with a new column named after \code{col_name}.
}
\description{
Sometimes you want to use \code{mutate} to create a new column in a
data.frame, but that function doesn't work with vectors. One workaround is to
use a \code{rowwise() \%>\% mutate()}, however that is quite slow. This
function lets you use the speed of \code{pmap} in a \code{mutate}-like syntax
(and returns the original data.frame with a new column, instead of just a
list). This works best if the column names of \code{.data} match the
arguments expected by \code{.f}.
}
\examples{
\dontrun{

# Create a column of charts:

# Create a custom plotting function
plot_starwars <- function(data) {
  ggplot2::qplot(x = mass, y = height, data = data)
}

# Make a tibble with the starwars data in twice
tibble::tibble(data = list(
  dplyr::starwars,
  dplyr::starwars
)) \%>\%
  mutate_pmap(
    col_name = plot,
    .f = plot_starwars
  )
}
}
