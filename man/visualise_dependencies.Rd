% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualise_dependencies.R
\name{visualise_dependencies}
\alias{visualise_dependencies}
\title{Visualise function dependencies}
\usage{
visualise_dependencies(.f = NULL, ...)
}
\arguments{
\item{.f}{(unquoted function name; default = \code{NULL}) an unquoted and
prefixed function name}

\item{...}{
  Arguments passed on to \code{\link[foodwebr:foodweb]{foodwebr::foodweb}}
  \describe{
    \item{\code{FUN}}{A function.}
    \item{\code{env}}{An environment, \code{parent.frame()} by default. Ignored if \code{FUN} is not \code{NULL}.}
    \item{\code{filter}}{Boolean. If \code{TRUE}, only functions that are direct descendants or antecedents of
\code{FUN} will be shown.}
    \item{\code{as.text}}{Boolean. If \code{TRUE}, rather than rendering the graph the intermediate graphviz
specification is returned.}
  }}
}
\value{
a \code{visNetwork} object
}
\description{
This function creates an interactive visualisation of function dependencies.
It can work on functions within a package, or functions loaded into your
global environment. Because the underlying functions are a bit weird, the
argument syntax isn't quite intuitive. The default behaviour will visualise
the function dependencies of what is in your global environment. If you want
to visualise the dependencies of a package, you need to pass the prefixed
name of a function from that package. Check the examples.
}
\examples{
\dontrun{

# To visualise the dependencies of your global environment:
sak::load_custom_functions() # You need the functions in the env
visualise_dependencies()

# To visualise the dependencies of a package
# Note if you are in a package repo first run `devtools::load_all()`
# You need to pass the name of a function from the package (any function will
# do)
visualise_dependencies(.f = sak::open_path)
}
}
