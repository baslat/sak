% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dependency_management.r, R/setup.R
\name{setup_renv}
\alias{setup_renv}
\title{Setup \code{renv} to track a project}
\usage{
setup_renv()

setup_renv()
}
\arguments{
\item{starter_packs}{character (default = \code{c("sak", "renv")}) a
character vector of extra packages to install. \code{renv} will try to identify
packages used in the project and install these too. You can specify the
version of a package by using the following notation: \verb{pins@0.4.5}.}

\item{search_for_deps}{(logical; default = \code{TRUE}) do you want \code{renv} to look
through the project and try to identify packages to track?}
}
\value{
nothing, called for side effects

nothing, just prints a message
}
\description{
This function will initialise \code{renv} in a project, both with specified
packages and identified dependencies. If run on an untracked project, it will
first initialise \code{renv} and restart R Studio. If run on a tracked project, it
will install the identified packages into the project library, and update the
lockfile. You can also use this function as a convenience wrapper to get
\code{renv} to track a new package you want to add to the project.

This function prints instructions and suggestions on how to use \code{renv}
to track dependencies in a project. This only prints instructions, because
\code{renv} functions are fairly simple to use, but their use is highly
context dependent, so instructions made the most sense.
}
\examples{
\dontrun{
# Start tracking a new project
setup_renv()
# renv installs and then restarts, and you need to run it again
# but lets track a specific version of `pins` too
setup_renv(starter_packs = c("sak", "rsconnect", "renv", "pins@0.4.5"))

# some time later, you realise you want to renv to track `zoo`
# this function can get renv to do that too
setup_renv("zoo")
}
}
