% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/concord_geos.R
\name{concord_geos}
\alias{concord_geos}
\title{All geographies concordance}
\usage{
concord_geos(.data, ..., from_geo, to_geo, concord_wt, value, func = "sum")
}
\arguments{
\item{.data}{(\code{tibble}) with suitably named geo columns}

\item{...}{columns to group by (e.g. date)}

\item{from_geo}{(unquoted character) the 'from' geography, present in both
\code{.data} and returnable by \code{\link{get_geos}}}

\item{to_geo}{(unquoted character) the 'to' geography, present in both
\code{.data} and returnable by \code{\link{get_geos}}}

\item{concord_wt}{(unquoted \code{persons} or \code{dwellings}) how to weight
the meshblocks}

\item{value}{(unquoted character) the column in \code{.data} to concord
across geographies}

\item{func}{(quoted character; default = \code{"sum"}) one of \code{"sum"} or
\code{"mean"}, how should the \code{value} be concorded? If the quantity is
additive, then \code{"sum"} makes sense. However if it is a rate or similar
then \code{"mean"} (which is a weighted mean based on the
\code{concord_wt}) might be more sensible.}
}
\value{
a tibble with columns for \code{...}, \code{to_geo} and \code{value}
}
\description{
Concord any geography to any other (well, most). It uses meshblocks to weight
(either by population or dwellings) and apportion values between geographies.
This does not return exactly the same values as official correspondence
tables provided by the ABS, in fact it systematically overestimates very low
percentages and underestimates very high percentages. The degree of the
discrepancy depends on the geographies being concorded, however I think it's
good enough for most use cases.
}
\details{
Make sure your \code{.data}'s geo column names match with those available in
\code{\link{get_geos}}. There is no error checking for valid geo names
against what's available, yet.
}
\examples{
\dontrun{

# Build your own concordance, for example between SA4 and LGA:

sa4 <- absmapsdata::sa42016 \%>\%
    sf::st_set_geometry(NULL) \%>\% # Remove the geometry column
    select(starts_with("sa4")) \%>\% # Just keep the identifiers
    mutate(pct = 1) \%>\% # i.e. 100\% of a SA4
    sak::normalise_geo_names(remove_year = FALSE) # deals with column classes

sa4_lga_concord <- sa4 \%>\%
    concord_geos(sa4_name_2016, sa4_code_2016, # add the identifiers so they
                                               # are returned as columns
                 from_geo = sa4_code_2016,
                 to_geo = lga_name_2020,
                 value = pct) # i.e. the 100\% from above


}
}
